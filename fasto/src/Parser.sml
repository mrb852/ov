local
type t__1__ = (int*int)
type t__2__ = (int*int)
type t__3__ = (int*int)
type t__4__ = (int*int)
type t__5__ = char*(int*int)
type t__6__ = (int*int)
type t__7__ = (int*int)
type t__8__ = (int*int)
type t__9__ = (int*int)
type t__10__ = (int*int)
type t__11__ = (int*int)
type t__12__ = (int*int)
type t__13__ = (int*int)
type t__14__ = (int*int)
type t__15__ = (int*int)
type t__16__ = string*(int*int)
type t__17__ = (int*int)
type t__18__ = (int*int)
type t__19__ = (int*int)
type t__20__ = (int*int)
type t__21__ = (int*int)
type t__22__ = (int*int)
type t__23__ = (int*int)
type t__24__ = (int*int)
type t__25__ = (int*int)
type t__26__ = (int*int)
type t__27__ = (int*int)
type t__28__ = (int*int)
type t__29__ = (int*int)
type t__30__ = int*(int*int)
type t__31__ = (int*int)
type t__32__ = (int*int)
type t__33__ = (int*int)
type t__34__ = (int*int)
type t__35__ = (int*int)
type t__36__ = (int*int)
type t__37__ = (int*int)
type t__38__ = (int*int)
type t__39__ = (int*int)
type t__40__ = (int*int)
type t__41__ = string*(int*int)
type t__42__ = (int*int)
type t__43__ = (int*int)
type t__44__ = (int*int)
type t__45__ = (int*int)
in
datatype token =
    AND of t__1__
  | ARROW of t__2__
  | BOOL of t__3__
  | CHAR of t__4__
  | CHARLIT of t__5__
  | COMMA of t__6__
  | DEQ of t__7__
  | DIVIDE of t__8__
  | ELSE of t__9__
  | EOF of t__10__
  | EQ of t__11__
  | FALSE of t__12__
  | FILTER of t__13__
  | FN of t__14__
  | FUN of t__15__
  | ID of t__16__
  | IF of t__17__
  | IN of t__18__
  | INT of t__19__
  | IOTA of t__20__
  | LBRACKET of t__21__
  | LCURLY of t__22__
  | LET of t__23__
  | LPAR of t__24__
  | LTH of t__25__
  | MAP of t__26__
  | MINUS of t__27__
  | NEGATE of t__28__
  | NOT of t__29__
  | NUM of t__30__
  | OP of t__31__
  | OR of t__32__
  | PLUS of t__33__
  | RBRACKET of t__34__
  | RCURLY of t__35__
  | READ of t__36__
  | REDUCE of t__37__
  | REPLICATE of t__38__
  | RPAR of t__39__
  | SCAN of t__40__
  | STRINGLIT of t__41__
  | THEN of t__42__
  | TIMES of t__43__
  | TRUE of t__44__
  | WRITE of t__45__
end;

open Obj Parsing;
prim_val vector_ : int -> 'a -> 'a Vector.vector = 2 "make_vect";
prim_val update_ : 'a Vector.vector -> int -> 'a -> unit = 3 "set_vect_item";


(* A parser definition for Fasto, for use with mosmlyac. *)

open Fasto
open Fasto.UnknownTypes

(* Line 12, file Parser.sml *)
val yytransl = #[
  257 (* AND *),
  258 (* ARROW *),
  259 (* BOOL *),
  260 (* CHAR *),
  261 (* CHARLIT *),
  262 (* COMMA *),
  263 (* DEQ *),
  264 (* DIVIDE *),
  265 (* ELSE *),
  266 (* EOF *),
  267 (* EQ *),
  268 (* FALSE *),
  269 (* FILTER *),
  270 (* FN *),
  271 (* FUN *),
  272 (* ID *),
  273 (* IF *),
  274 (* IN *),
  275 (* INT *),
  276 (* IOTA *),
  277 (* LBRACKET *),
  278 (* LCURLY *),
  279 (* LET *),
  280 (* LPAR *),
  281 (* LTH *),
  282 (* MAP *),
  283 (* MINUS *),
  284 (* NEGATE *),
  285 (* NOT *),
  286 (* NUM *),
  287 (* OP *),
  288 (* OR *),
  289 (* PLUS *),
  290 (* RBRACKET *),
  291 (* RCURLY *),
  292 (* READ *),
  293 (* REDUCE *),
  294 (* REPLICATE *),
  295 (* RPAR *),
  296 (* SCAN *),
  297 (* STRINGLIT *),
  298 (* THEN *),
  299 (* TIMES *),
  300 (* TRUE *),
  301 (* WRITE *),
    0];

val yylhs = "\255\255\
\\001\000\002\000\002\000\003\000\003\000\004\000\004\000\004\000\
\\004\000\005\000\005\000\009\000\009\000\009\000\009\000\006\000\
\\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\\006\000\006\000\006\000\006\000\006\000\006\000\006\000\007\000\
\\007\000\008\000\008\000\008\000\000\000";

val yylen = "\002\000\
\\002\000\003\000\002\000\007\000\006\000\001\000\001\000\001\000\
\\003\000\004\000\002\000\001\000\001\000\001\000\001\000\001\000\
\\001\000\001\000\001\000\001\000\001\000\003\000\002\000\003\000\
\\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\\006\000\004\000\003\000\004\000\004\000\004\000\006\000\008\000\
\\006\000\006\000\009\000\008\000\003\000\006\000\004\000\003\000\
\\001\000\001\000\007\000\006\000\002\000";

val yydefred = "\000\000\
\\000\000\000\000\000\000\053\000\000\000\007\000\008\000\006\000\
\\000\000\000\000\000\000\001\000\000\000\002\000\000\000\009\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
\\019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\
\\021\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
\\000\000\000\000\050\000\000\000\000\000\035\000\000\000\000\000\
\\000\000\000\000\022\000\000\000\045\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\047\000\034\000\
\\000\000\038\000\048\000\000\000\000\000\036\000\015\000\013\000\
\\012\000\014\000\000\000\000\000\000\000\000\000\037\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\042\000\000\000\000\000\041\000\000\000\000\000\
\\039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\040\000\044\000\000\000\043\000";

val yydgoto = "\002\000\
\\004\000\005\000\010\000\019\000\020\000\052\000\053\000\076\000\
\\115\000";

val yysindex = "\008\000\
\\008\255\000\000\088\255\000\000\022\255\000\000\000\000\000\000\
\\088\255\008\255\050\255\000\000\033\255\000\000\051\255\000\000\
\\000\255\067\255\063\255\041\255\122\001\077\255\074\255\000\000\
\\000\000\062\255\053\255\122\001\065\255\122\001\078\255\122\001\
\\075\255\122\001\122\001\000\000\082\255\084\255\092\255\097\255\
\\000\000\000\000\099\255\176\000\088\255\122\001\004\255\122\001\
\\092\001\028\255\122\001\208\255\090\255\087\255\217\255\004\255\
\\000\000\057\255\088\255\038\255\122\001\004\255\122\001\122\001\
\\122\001\122\001\122\001\122\001\122\001\122\001\122\001\000\000\
\\176\000\088\255\000\000\120\255\238\255\000\000\089\255\122\001\
\\251\255\122\001\000\000\122\001\000\000\121\255\091\255\029\255\
\\126\255\004\000\127\255\016\000\057\255\060\255\000\000\060\255\
\\254\254\185\000\254\254\000\000\110\255\122\001\000\000\000\000\
\\043\000\000\000\000\000\055\000\122\001\000\000\000\000\000\000\
\\000\000\000\000\129\255\122\001\122\001\122\001\000\000\012\255\
\\064\000\122\001\122\001\077\000\122\001\105\000\092\000\120\000\
\\138\255\102\255\000\000\176\000\176\000\000\000\133\000\122\001\
\\000\000\122\001\122\001\140\255\122\001\142\000\163\000\176\000\
\\122\001\172\000\000\000\000\000\176\000\000\000";

val yyrindex = "\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\135\255\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\109\255\000\000\000\000\
\\000\000\000\000\104\255\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\251\254\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\255\254\000\000\000\000\000\000\000\000\
\\143\255\057\001\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\002\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\068\001\009\001\156\255\022\001\
\\215\000\155\001\228\000\195\255\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\165\001\196\001\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\148\255\
\\000\000\000\000\000\000\000\000\149\255\000\000";

val yygindex = "\000\000\
\\000\000\146\000\000\000\255\255\212\255\235\255\231\255\222\255\
\\000\000";

val YYTABLESIZE = 750;
val yytable = "\044\000\
\\072\000\011\000\006\000\007\000\005\000\066\000\050\000\013\000\
\\001\000\005\000\055\000\004\000\057\000\058\000\006\000\007\000\
\\004\000\074\000\008\000\075\000\009\000\086\000\003\000\079\000\
\\073\000\089\000\077\000\091\000\064\000\081\000\008\000\012\000\
\\009\000\049\000\065\000\066\000\111\000\049\000\018\000\090\000\
\\071\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\\099\000\100\000\129\000\074\000\067\000\075\000\068\000\112\000\
\\107\000\087\000\105\000\069\000\070\000\113\000\108\000\065\000\
\\066\000\015\000\016\000\066\000\088\000\080\000\071\000\114\000\
\\101\000\048\000\017\000\130\000\049\000\021\000\022\000\023\000\
\\121\000\067\000\045\000\068\000\046\000\047\000\068\000\124\000\
\\051\000\070\000\006\000\007\000\070\000\054\000\126\000\127\000\
\\128\000\084\000\056\000\071\000\132\000\133\000\071\000\135\000\
\\020\000\059\000\008\000\060\000\009\000\020\000\020\000\020\000\
\\020\000\020\000\142\000\061\000\143\000\144\000\020\000\146\000\
\\062\000\020\000\063\000\149\000\083\000\102\000\109\000\104\000\
\\020\000\110\000\020\000\116\000\118\000\120\000\125\000\020\000\
\\020\000\020\000\020\000\139\000\140\000\145\000\020\000\023\000\
\\003\000\020\000\020\000\011\000\023\000\023\000\023\000\023\000\
\\023\000\052\000\051\000\014\000\026\000\023\000\000\000\000\000\
\\023\000\026\000\026\000\026\000\026\000\026\000\000\000\023\000\
\\000\000\023\000\026\000\000\000\000\000\026\000\023\000\023\000\
\\023\000\023\000\000\000\000\000\026\000\023\000\026\000\000\000\
\\023\000\023\000\000\000\026\000\026\000\026\000\026\000\000\000\
\\000\000\000\000\026\000\027\000\000\000\026\000\026\000\000\000\
\\027\000\027\000\027\000\027\000\027\000\000\000\000\000\000\000\
\\064\000\027\000\000\000\000\000\027\000\082\000\065\000\066\000\
\\000\000\064\000\000\000\027\000\000\000\027\000\000\000\065\000\
\\066\000\000\000\027\000\027\000\027\000\027\000\000\000\000\000\
\\067\000\027\000\068\000\000\000\027\000\027\000\064\000\069\000\
\\070\000\067\000\000\000\068\000\065\000\066\000\000\000\000\000\
\\069\000\070\000\071\000\064\000\000\000\000\000\000\000\085\000\
\\000\000\065\000\066\000\071\000\064\000\000\000\067\000\000\000\
\\068\000\117\000\065\000\066\000\000\000\069\000\070\000\103\000\
\\064\000\000\000\000\000\067\000\000\000\068\000\065\000\066\000\
\\071\000\000\000\069\000\070\000\067\000\000\000\068\000\000\000\
\\000\000\106\000\000\000\069\000\070\000\071\000\000\000\000\000\
\\067\000\000\000\068\000\064\000\000\000\000\000\071\000\069\000\
\\070\000\065\000\066\000\122\000\000\000\000\000\119\000\064\000\
\\000\000\000\000\071\000\000\000\000\000\065\000\066\000\000\000\
\\064\000\000\000\000\000\067\000\000\000\068\000\065\000\066\000\
\\123\000\000\000\069\000\070\000\000\000\064\000\000\000\067\000\
\\000\000\068\000\000\000\065\000\066\000\071\000\069\000\070\000\
\\067\000\000\000\068\000\000\000\064\000\000\000\000\000\069\000\
\\070\000\071\000\065\000\066\000\000\000\067\000\131\000\068\000\
\\000\000\064\000\071\000\000\000\069\000\070\000\136\000\065\000\
\\066\000\000\000\000\000\134\000\067\000\000\000\068\000\071\000\
\\064\000\000\000\000\000\069\000\070\000\138\000\065\000\066\000\
\\000\000\067\000\137\000\068\000\000\000\064\000\071\000\000\000\
\\069\000\070\000\141\000\065\000\066\000\000\000\064\000\000\000\
\\067\000\000\000\068\000\071\000\065\000\066\000\000\000\069\000\
\\070\000\000\000\000\000\000\000\000\000\067\000\000\000\068\000\
\\000\000\000\000\071\000\064\000\069\000\070\000\067\000\000\000\
\\068\000\065\000\066\000\000\000\064\000\069\000\070\000\071\000\
\\064\000\000\000\065\000\066\000\147\000\000\000\065\000\066\000\
\\071\000\064\000\000\000\067\000\000\000\068\000\000\000\065\000\
\\066\000\000\000\069\000\070\000\067\000\000\000\068\000\000\000\
\\067\000\148\000\068\000\069\000\070\000\071\000\000\000\069\000\
\\070\000\067\000\150\000\068\000\000\000\000\000\071\000\025\000\
\\000\000\070\000\071\000\000\000\025\000\025\000\000\000\025\000\
\\025\000\000\000\000\000\071\000\024\000\025\000\000\000\000\000\
\\025\000\024\000\024\000\000\000\024\000\024\000\000\000\025\000\
\\000\000\025\000\024\000\000\000\000\000\024\000\025\000\025\000\
\\025\000\025\000\000\000\000\000\024\000\025\000\024\000\000\000\
\\025\000\000\000\000\000\024\000\024\000\024\000\024\000\000\000\
\\000\000\029\000\024\000\000\000\000\000\024\000\029\000\029\000\
\\000\000\029\000\029\000\000\000\000\000\000\000\030\000\029\000\
\\000\000\000\000\029\000\030\000\030\000\000\000\030\000\030\000\
\\000\000\029\000\000\000\000\000\030\000\000\000\000\000\030\000\
\\029\000\000\000\029\000\029\000\000\000\000\000\030\000\029\000\
\\000\000\000\000\029\000\000\000\000\000\030\000\000\000\030\000\
\\030\000\032\000\000\000\000\000\030\000\000\000\032\000\030\000\
\\000\000\032\000\032\000\000\000\028\000\000\000\000\000\032\000\
\\000\000\028\000\032\000\000\000\028\000\028\000\000\000\000\000\
\\000\000\000\000\028\000\000\000\000\000\028\000\000\000\000\000\
\\032\000\000\000\032\000\032\000\000\000\000\000\000\000\032\000\
\\024\000\000\000\032\000\028\000\000\000\028\000\028\000\025\000\
\\026\000\000\000\028\000\027\000\028\000\028\000\000\000\029\000\
\\000\000\030\000\031\000\032\000\000\000\033\000\000\000\034\000\
\\035\000\036\000\000\000\000\000\000\000\000\000\024\000\037\000\
\\038\000\039\000\078\000\040\000\041\000\025\000\026\000\042\000\
\\043\000\027\000\028\000\000\000\000\000\029\000\000\000\030\000\
\\031\000\032\000\000\000\033\000\000\000\034\000\035\000\036\000\
\\000\000\000\000\000\000\000\000\000\000\037\000\038\000\039\000\
\\031\000\040\000\041\000\031\000\031\000\042\000\043\000\000\000\
\\000\000\031\000\033\000\000\000\031\000\033\000\033\000\000\000\
\\000\000\000\000\000\000\033\000\000\000\000\000\033\000\000\000\
\\000\000\000\000\031\000\000\000\031\000\031\000\000\000\000\000\
\\000\000\031\000\000\000\000\000\031\000\000\000\033\000\033\000\
\\000\000\046\000\000\000\033\000\046\000\046\000\033\000\000\000\
\\000\000\000\000\046\000\000\000\000\000\046\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\046\000\046\000\000\000\
\\000\000\000\000\046\000\000\000\000\000\046\000";

val yycheck = "\021\000\
\\045\000\003\000\003\001\004\001\010\001\008\001\028\000\009\000\
\\001\000\015\001\032\000\010\001\034\000\035\000\003\001\004\001\
\\015\001\014\001\019\001\016\001\021\001\056\000\015\001\049\000\
\\046\000\060\000\048\000\062\000\001\001\051\000\019\001\010\001\
\\021\001\035\001\007\001\008\001\008\001\039\001\039\001\061\000\
\\043\001\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\\070\000\071\000\039\001\014\001\025\001\016\001\027\001\027\001\
\\082\000\059\000\080\000\032\001\033\001\033\001\084\000\007\001\
\\008\001\016\001\034\001\008\001\031\001\042\001\043\001\043\001\
\\074\000\021\001\024\001\120\000\024\001\011\001\016\001\039\001\
\\102\000\025\001\006\001\027\001\011\001\024\001\027\001\109\000\
\\024\001\033\001\003\001\004\001\033\001\016\001\116\000\117\000\
\\118\000\011\001\024\001\043\001\122\000\123\000\043\001\125\000\
\\001\001\024\001\019\001\024\001\021\001\006\001\007\001\008\001\
\\009\001\010\001\136\000\024\001\138\000\139\000\015\001\141\000\
\\024\001\018\001\024\001\145\000\035\001\006\001\006\001\039\001\
\\025\001\039\001\027\001\006\001\006\001\024\001\006\001\032\001\
\\033\001\034\001\035\001\002\001\039\001\002\001\039\001\001\001\
\\010\001\042\001\043\001\039\001\006\001\007\001\008\001\009\001\
\\010\001\006\001\006\001\010\000\001\001\015\001\255\255\255\255\
\\018\001\006\001\007\001\008\001\009\001\010\001\255\255\025\001\
\\255\255\027\001\015\001\255\255\255\255\018\001\032\001\033\001\
\\034\001\035\001\255\255\255\255\025\001\039\001\027\001\255\255\
\\042\001\043\001\255\255\032\001\033\001\034\001\035\001\255\255\
\\255\255\255\255\039\001\001\001\255\255\042\001\043\001\255\255\
\\006\001\007\001\008\001\009\001\010\001\255\255\255\255\255\255\
\\001\001\015\001\255\255\255\255\018\001\006\001\007\001\008\001\
\\255\255\001\001\255\255\025\001\255\255\027\001\255\255\007\001\
\\008\001\255\255\032\001\033\001\034\001\035\001\255\255\255\255\
\\025\001\039\001\027\001\255\255\042\001\043\001\001\001\032\001\
\\033\001\025\001\255\255\027\001\007\001\008\001\255\255\255\255\
\\032\001\033\001\043\001\001\001\255\255\255\255\255\255\039\001\
\\255\255\007\001\008\001\043\001\001\001\255\255\025\001\255\255\
\\027\001\006\001\007\001\008\001\255\255\032\001\033\001\034\001\
\\001\001\255\255\255\255\025\001\255\255\027\001\007\001\008\001\
\\043\001\255\255\032\001\033\001\025\001\255\255\027\001\255\255\
\\255\255\039\001\255\255\032\001\033\001\043\001\255\255\255\255\
\\025\001\255\255\027\001\001\001\255\255\255\255\043\001\032\001\
\\033\001\007\001\008\001\009\001\255\255\255\255\039\001\001\001\
\\255\255\255\255\043\001\255\255\255\255\007\001\008\001\255\255\
\\001\001\255\255\255\255\025\001\255\255\027\001\007\001\008\001\
\\018\001\255\255\032\001\033\001\255\255\001\001\255\255\025\001\
\\255\255\027\001\255\255\007\001\008\001\043\001\032\001\033\001\
\\025\001\255\255\027\001\255\255\001\001\255\255\255\255\032\001\
\\033\001\043\001\007\001\008\001\255\255\025\001\039\001\027\001\
\\255\255\001\001\043\001\255\255\032\001\033\001\006\001\007\001\
\\008\001\255\255\255\255\039\001\025\001\255\255\027\001\043\001\
\\001\001\255\255\255\255\032\001\033\001\006\001\007\001\008\001\
\\255\255\025\001\039\001\027\001\255\255\001\001\043\001\255\255\
\\032\001\033\001\006\001\007\001\008\001\255\255\001\001\255\255\
\\025\001\255\255\027\001\043\001\007\001\008\001\255\255\032\001\
\\033\001\255\255\255\255\255\255\255\255\025\001\255\255\027\001\
\\255\255\255\255\043\001\001\001\032\001\033\001\025\001\255\255\
\\027\001\007\001\008\001\255\255\001\001\032\001\033\001\043\001\
\\001\001\255\255\007\001\008\001\039\001\255\255\007\001\008\001\
\\043\001\001\001\255\255\025\001\255\255\027\001\255\255\007\001\
\\008\001\255\255\032\001\033\001\025\001\255\255\027\001\255\255\
\\025\001\039\001\027\001\032\001\033\001\043\001\255\255\032\001\
\\033\001\025\001\039\001\027\001\255\255\255\255\043\001\001\001\
\\255\255\033\001\043\001\255\255\006\001\007\001\255\255\009\001\
\\010\001\255\255\255\255\043\001\001\001\015\001\255\255\255\255\
\\018\001\006\001\007\001\255\255\009\001\010\001\255\255\025\001\
\\255\255\027\001\015\001\255\255\255\255\018\001\032\001\033\001\
\\034\001\035\001\255\255\255\255\025\001\039\001\027\001\255\255\
\\042\001\255\255\255\255\032\001\033\001\034\001\035\001\255\255\
\\255\255\001\001\039\001\255\255\255\255\042\001\006\001\007\001\
\\255\255\009\001\010\001\255\255\255\255\255\255\001\001\015\001\
\\255\255\255\255\018\001\006\001\007\001\255\255\009\001\010\001\
\\255\255\025\001\255\255\255\255\015\001\255\255\255\255\018\001\
\\032\001\255\255\034\001\035\001\255\255\255\255\025\001\039\001\
\\255\255\255\255\042\001\255\255\255\255\032\001\255\255\034\001\
\\035\001\001\001\255\255\255\255\039\001\255\255\006\001\042\001\
\\255\255\009\001\010\001\255\255\001\001\255\255\255\255\015\001\
\\255\255\006\001\018\001\255\255\009\001\010\001\255\255\255\255\
\\255\255\255\255\015\001\255\255\255\255\018\001\255\255\255\255\
\\032\001\255\255\034\001\035\001\255\255\255\255\255\255\039\001\
\\005\001\255\255\042\001\032\001\255\255\034\001\035\001\012\001\
\\013\001\255\255\039\001\016\001\017\001\042\001\255\255\020\001\
\\255\255\022\001\023\001\024\001\255\255\026\001\255\255\028\001\
\\029\001\030\001\255\255\255\255\255\255\255\255\005\001\036\001\
\\037\001\038\001\039\001\040\001\041\001\012\001\013\001\044\001\
\\045\001\016\001\017\001\255\255\255\255\020\001\255\255\022\001\
\\023\001\024\001\255\255\026\001\255\255\028\001\029\001\030\001\
\\255\255\255\255\255\255\255\255\255\255\036\001\037\001\038\001\
\\006\001\040\001\041\001\009\001\010\001\044\001\045\001\255\255\
\\255\255\015\001\006\001\255\255\018\001\009\001\010\001\255\255\
\\255\255\255\255\255\255\015\001\255\255\255\255\018\001\255\255\
\\255\255\255\255\032\001\255\255\034\001\035\001\255\255\255\255\
\\255\255\039\001\255\255\255\255\042\001\255\255\034\001\035\001\
\\255\255\006\001\255\255\039\001\009\001\010\001\042\001\255\255\
\\255\255\255\255\015\001\255\255\255\255\018\001\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\034\001\035\001\255\255\
\\255\255\255\255\039\001\255\255\255\255\042\001";

val yyact = vector_ 54 (fn () => ((raise Fail "parser") : obj));
(* Rule 1, file Parser.grm, line 46 *)
val _ = update_ yyact 1
(fn () => repr(let
val d__1__ = peekVal 1 : Fasto.UnknownTypes.FunDec list
val d__2__ = peekVal 0 : (int*int)
in
( (d__1__) ) end : Fasto.UnknownTypes.Prog))
;
(* Rule 2, file Parser.grm, line 49 *)
val _ = update_ yyact 2
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : Fasto.UnknownTypes.FunDec
val d__3__ = peekVal 0 : Fasto.UnknownTypes.FunDec list
in
( (d__2__) :: (d__3__) ) end : Fasto.UnknownTypes.FunDec list))
;
(* Rule 3, file Parser.grm, line 50 *)
val _ = update_ yyact 3
(fn () => repr(let
val d__1__ = peekVal 1 : (int*int)
val d__2__ = peekVal 0 : Fasto.UnknownTypes.FunDec
in
( (d__2__) :: [] ) end : Fasto.UnknownTypes.FunDec list))
;
(* Rule 4, file Parser.grm, line 54 *)
val _ = update_ yyact 4
(fn () => repr(let
val d__1__ = peekVal 6 : Fasto.Type
val d__2__ = peekVal 5 : string*(int*int)
val d__3__ = peekVal 4 : (int*int)
val d__4__ = peekVal 3 : Fasto.Param list
val d__5__ = peekVal 2 : (int*int)
val d__6__ = peekVal 1 : (int*int)
val d__7__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( FunDec (#1 (d__2__), (d__1__), (d__4__), (d__7__), #2 (d__2__)) ) end : Fasto.UnknownTypes.FunDec))
;
(* Rule 5, file Parser.grm, line 56 *)
val _ = update_ yyact 5
(fn () => repr(let
val d__1__ = peekVal 5 : Fasto.Type
val d__2__ = peekVal 4 : string*(int*int)
val d__3__ = peekVal 3 : (int*int)
val d__4__ = peekVal 2 : (int*int)
val d__5__ = peekVal 1 : (int*int)
val d__6__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( FunDec (#1 (d__2__), (d__1__), [], (d__6__), #2 (d__2__)) ) end : Fasto.UnknownTypes.FunDec))
;
(* Rule 6, file Parser.grm, line 59 *)
val _ = update_ yyact 6
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Int ) end : Fasto.Type))
;
(* Rule 7, file Parser.grm, line 60 *)
val _ = update_ yyact 7
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Bool ) end : Fasto.Type))
;
(* Rule 8, file Parser.grm, line 61 *)
val _ = update_ yyact 8
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Char ) end : Fasto.Type))
;
(* Rule 9, file Parser.grm, line 62 *)
val _ = update_ yyact 9
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : Fasto.Type
val d__3__ = peekVal 0 : (int*int)
in
( Array (d__2__) ) end : Fasto.Type))
;
(* Rule 10, file Parser.grm, line 64 *)
val _ = update_ yyact 10
(fn () => repr(let
val d__1__ = peekVal 3 : Fasto.Type
val d__2__ = peekVal 2 : string*(int*int)
val d__3__ = peekVal 1 : (int*int)
val d__4__ = peekVal 0 : Fasto.Param list
in
( Param (#1 (d__2__), (d__1__)) :: (d__4__) ) end : Fasto.Param list))
;
(* Rule 11, file Parser.grm, line 65 *)
val _ = update_ yyact 11
(fn () => repr(let
val d__1__ = peekVal 1 : Fasto.Type
val d__2__ = peekVal 0 : string*(int*int)
in
( Param (#1 (d__2__), (d__1__)) :: [] ) end : Fasto.Param list))
;
(* Rule 12, file Parser.grm, line 68 *)
val _ = update_ yyact 12
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( (Lambda (Int, [Param ("x", Int), Param ("y", Int)],
                   Plus (Var ("x", (d__1__)), Var ("y", (d__1__)), (d__1__)) ,(d__1__))) ) end : Fasto.UnknownTypes.FunArg))
;
(* Rule 13, file Parser.grm, line 71 *)
val _ = update_ yyact 13
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( (Lambda (Int, [Param ("x", Int), Param ("y", Int)],
                   Minus (Var ("x", (d__1__)), Var ("y", (d__1__)), (d__1__)) ,(d__1__))) ) end : Fasto.UnknownTypes.FunArg))
;
(* Rule 14, file Parser.grm, line 74 *)
val _ = update_ yyact 14
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( (Lambda (Int, [Param ("x", Int), Param ("y", Int)],
                   Times (Var ("x", (d__1__)), Var ("y", (d__1__)), (d__1__)) ,(d__1__))) ) end : Fasto.UnknownTypes.FunArg))
;
(* Rule 15, file Parser.grm, line 77 *)
val _ = update_ yyact 15
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( (Lambda (Int, [Param ("x", Int), Param ("y", Int)],
                   Divide (Var ("x", (d__1__)), Var ("y", (d__1__)), (d__1__)) ,(d__1__))) ) end : Fasto.UnknownTypes.FunArg))
;
(* Rule 16, file Parser.grm, line 81 *)
val _ = update_ yyact 16
(fn () => repr(let
val d__1__ = peekVal 0 : int*(int*int)
in
( Constant (IntVal (#1 (d__1__)), #2 (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 17, file Parser.grm, line 82 *)
val _ = update_ yyact 17
(fn () => repr(let
val d__1__ = peekVal 0 : char*(int*int)
in
( Constant (CharVal (#1 (d__1__)), #2 (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 18, file Parser.grm, line 83 *)
val _ = update_ yyact 18
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Constant (BoolVal (true), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 19, file Parser.grm, line 84 *)
val _ = update_ yyact 19
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Constant (BoolVal (false), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 20, file Parser.grm, line 85 *)
val _ = update_ yyact 20
(fn () => repr(let
val d__1__ = peekVal 0 : string*(int*int)
in
( Var (d__1__) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 21, file Parser.grm, line 86 *)
val _ = update_ yyact 21
(fn () => repr(let
val d__1__ = peekVal 0 : string*(int*int)
in
( StringLit (d__1__) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 22, file Parser.grm, line 88 *)
val _ = update_ yyact 22
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : Fasto.UnknownTypes.Exp list
val d__3__ = peekVal 0 : (int*int)
in
( ArrayLit ((d__2__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 23, file Parser.grm, line 89 *)
val _ = update_ yyact 23
(fn () => repr(let
val d__1__ = peekVal 1 : (int*int)
val d__2__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Negate ((d__2__), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 24, file Parser.grm, line 90 *)
val _ = update_ yyact 24
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Plus ((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 25, file Parser.grm, line 91 *)
val _ = update_ yyact 25
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Minus((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 26, file Parser.grm, line 92 *)
val _ = update_ yyact 26
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Divide((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 27, file Parser.grm, line 93 *)
val _ = update_ yyact 27
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Times((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 28, file Parser.grm, line 94 *)
val _ = update_ yyact 28
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( And((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 29, file Parser.grm, line 95 *)
val _ = update_ yyact 29
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Equal((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 30, file Parser.grm, line 96 *)
val _ = update_ yyact 30
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Less ((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 31, file Parser.grm, line 97 *)
val _ = update_ yyact 31
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Or ((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 32, file Parser.grm, line 98 *)
val _ = update_ yyact 32
(fn () => repr(let
val d__1__ = peekVal 1 : (int*int)
val d__2__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Not ((d__2__), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 33, file Parser.grm, line 100 *)
val _ = update_ yyact 33
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : Fasto.UnknownTypes.Exp
val d__3__ = peekVal 3 : (int*int)
val d__4__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__5__ = peekVal 1 : (int*int)
val d__6__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( If ((d__2__), (d__4__), (d__6__), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 34, file Parser.grm, line 102 *)
val _ = update_ yyact 34
(fn () => repr(let
val d__1__ = peekVal 3 : string*(int*int)
val d__2__ = peekVal 2 : (int*int)
val d__3__ = peekVal 1 : Fasto.UnknownTypes.Exp list
val d__4__ = peekVal 0 : (int*int)
in
( Apply (#1 (d__1__), (d__3__), #2 (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 35, file Parser.grm, line 104 *)
val _ = update_ yyact 35
(fn () => repr(let
val d__1__ = peekVal 2 : string*(int*int)
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : (int*int)
in
( Apply (#1 (d__1__), [], #2 (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 36, file Parser.grm, line 107 *)
val _ = update_ yyact 36
(fn () => repr(let
val d__1__ = peekVal 3 : (int*int)
val d__2__ = peekVal 2 : (int*int)
val d__3__ = peekVal 1 : Fasto.Type
val d__4__ = peekVal 0 : (int*int)
in
( Read ((d__3__), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 37, file Parser.grm, line 109 *)
val _ = update_ yyact 37
(fn () => repr(let
val d__1__ = peekVal 3 : (int*int)
val d__2__ = peekVal 2 : (int*int)
val d__3__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__4__ = peekVal 0 : (int*int)
in
( Write ((d__3__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 38, file Parser.grm, line 111 *)
val _ = update_ yyact 38
(fn () => repr(let
val d__1__ = peekVal 3 : (int*int)
val d__2__ = peekVal 2 : (int*int)
val d__3__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__4__ = peekVal 0 : (int*int)
in
( Iota ((d__3__), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 39, file Parser.grm, line 113 *)
val _ = update_ yyact 39
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : (int*int)
val d__3__ = peekVal 3 : Fasto.UnknownTypes.Exp
val d__4__ = peekVal 2 : (int*int)
val d__5__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__6__ = peekVal 0 : (int*int)
in
( Replicate ((d__3__), (d__5__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 40, file Parser.grm, line 115 *)
val _ = update_ yyact 40
(fn () => repr(let
val d__1__ = peekVal 7 : (int*int)
val d__2__ = peekVal 6 : (int*int)
val d__3__ = peekVal 5 : Fasto.UnknownTypes.FunArg
val d__4__ = peekVal 4 : (int*int)
val d__5__ = peekVal 3 : Fasto.UnknownTypes.Exp
val d__6__ = peekVal 2 : (int*int)
val d__7__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__8__ = peekVal 0 : (int*int)
in
( Reduce ((d__3__), (d__5__), (d__7__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 41, file Parser.grm, line 117 *)
val _ = update_ yyact 41
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : (int*int)
val d__3__ = peekVal 3 : Fasto.UnknownTypes.FunArg
val d__4__ = peekVal 2 : (int*int)
val d__5__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__6__ = peekVal 0 : (int*int)
in
( Map ((d__3__), (d__5__), (), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 42, file Parser.grm, line 119 *)
val _ = update_ yyact 42
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : (int*int)
val d__3__ = peekVal 3 : Fasto.UnknownTypes.FunArg
val d__4__ = peekVal 2 : (int*int)
val d__5__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__6__ = peekVal 0 : (int*int)
in
( Filter ((d__3__), (d__5__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 43, file Parser.grm, line 121 *)
val _ = update_ yyact 43
(fn () => repr(let
val d__1__ = peekVal 8 : (int*int)
val d__2__ = peekVal 7 : (int*int)
val d__3__ = peekVal 6 : (int*int)
val d__4__ = peekVal 5 : Fasto.UnknownTypes.FunArg
val d__5__ = peekVal 4 : (int*int)
val d__6__ = peekVal 3 : Fasto.UnknownTypes.Exp
val d__7__ = peekVal 2 : (int*int)
val d__8__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__9__ = peekVal 0 : (int*int)
in
( Reduce ((d__4__), (d__6__), (d__8__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 44, file Parser.grm, line 123 *)
val _ = update_ yyact 44
(fn () => repr(let
val d__1__ = peekVal 7 : (int*int)
val d__2__ = peekVal 6 : (int*int)
val d__3__ = peekVal 5 : Fasto.UnknownTypes.FunArg
val d__4__ = peekVal 4 : (int*int)
val d__5__ = peekVal 3 : Fasto.UnknownTypes.Exp
val d__6__ = peekVal 2 : (int*int)
val d__7__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__8__ = peekVal 0 : (int*int)
in
( Scan ((d__3__), (d__5__), (d__7__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 45, file Parser.grm, line 124 *)
val _ = update_ yyact 45
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__3__ = peekVal 0 : (int*int)
in
( (d__2__) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 46, file Parser.grm, line 126 *)
val _ = update_ yyact 46
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : string*(int*int)
val d__3__ = peekVal 3 : (int*int)
val d__4__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__5__ = peekVal 1 : (int*int)
val d__6__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Let (Dec (#1 (d__2__), (d__4__), (d__3__)), (d__6__), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 47, file Parser.grm, line 128 *)
val _ = update_ yyact 47
(fn () => repr(let
val d__1__ = peekVal 3 : string*(int*int)
val d__2__ = peekVal 2 : (int*int)
val d__3__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__4__ = peekVal 0 : (int*int)
in
( Index (#1 (d__1__), (d__3__), (), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 48, file Parser.grm, line 131 *)
val _ = update_ yyact 48
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp list
in
( (d__1__) :: (d__3__) ) end : Fasto.UnknownTypes.Exp list))
;
(* Rule 49, file Parser.grm, line 132 *)
val _ = update_ yyact 49
(fn () => repr(let
val d__1__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( (d__1__) :: [] ) end : Fasto.UnknownTypes.Exp list))
;
(* Rule 50, file Parser.grm, line 135 *)
val _ = update_ yyact 50
(fn () => repr(let
val d__1__ = peekVal 0 : string*(int*int)
in
( FunName (#1 (d__1__)) ) end : Fasto.UnknownTypes.FunArg))
;
(* Rule 51, file Parser.grm, line 136 *)
val _ = update_ yyact 51
(fn () => repr(let
val d__1__ = peekVal 6 : (int*int)
val d__2__ = peekVal 5 : Fasto.Type
val d__3__ = peekVal 4 : (int*int)
val d__4__ = peekVal 3 : Fasto.Param list
val d__5__ = peekVal 2 : (int*int)
val d__6__ = peekVal 1 : (int*int)
val d__7__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Lambda ((d__2__), (d__4__), (d__7__), (d__1__)) ) end : Fasto.UnknownTypes.FunArg))
;
(* Rule 52, file Parser.grm, line 137 *)
val _ = update_ yyact 52
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : Fasto.Type
val d__3__ = peekVal 3 : (int*int)
val d__4__ = peekVal 2 : (int*int)
val d__5__ = peekVal 1 : (int*int)
val d__6__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Lambda ((d__2__), [], (d__6__), (d__1__)) ) end : Fasto.UnknownTypes.FunArg))
;
(* Entry Prog *)
val _ = update_ yyact 53 (fn () => raise yyexit (peekVal 0));
val yytables : parseTables =
  ( yyact,
    yytransl,
    yylhs,
    yylen,
    yydefred,
    yydgoto,
    yysindex,
    yyrindex,
    yygindex,
    YYTABLESIZE,
    yytable,
    yycheck );
fun Prog lexer lexbuf = yyparse yytables 1 lexer lexbuf;
